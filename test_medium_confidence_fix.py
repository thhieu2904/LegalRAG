#!/usr/bin/env python3
"""
TEST MEDIUM CONFIDENCE CLARIFICATION FIX
=========================================

Test ƒë·ªÉ verify r·∫±ng medium confidence (0.5-0.8) gi·ªù trigger clarification
thay v√¨ route sai nh∆∞ tr∆∞·ªõc ƒë√¢y.

Case Study: Query "l·∫≠p di ch√∫c" tr∆∞·ªõc ƒë√¢y b·ªã route sai th√†nh marriage registration
v·ªõi confidence 0.673 (medium) m√† kh√¥ng h·ªèi clarification.
"""

import asyncio
import sys
import os

# Add backend to path
backend_path = os.path.join(os.path.dirname(__file__), '..', 'backend')
sys.path.insert(0, backend_path)

from app.services.rag_engine import RAGService
from app.core.config import Settings

async def test_medium_confidence_clarification():
    """Test medium confidence queries trigger clarification"""
    
    print("üß™ TESTING MEDIUM CONFIDENCE CLARIFICATION FIX")
    print("=" * 60)
    
    settings = Settings()
    rag_service = RAGService(settings)
    
    # Test cases v·ªõi expected medium confidence (0.5-0.8)
    test_queries = [
        {
            "query": "l·∫≠p di ch√∫c nh∆∞ th·∫ø n√†o",
            "description": "Query v·ªÅ will/testament - tr∆∞·ªõc ƒë√¢y b·ªã route sai th√†nh marriage",
            "expected": "clarification (not routing to marriage)"
        },
        {
            "query": "th·ªß t·ª•c visa du l·ªãch", 
            "description": "Query v·ªÅ visa - c√≥ th·ªÉ confuse v·ªõi passport/travel docs",
            "expected": "clarification (ambiguous travel document type)"
        },
        {
            "query": "xin ph√©p x√¢y nh√†",
            "description": "Construction permit - c√≥ th·ªÉ confuse v·ªõi multiple permit types",
            "expected": "clarification (many construction permit types)"
        }
    ]
    
    for i, test_case in enumerate(test_queries, 1):
        print(f"\nüîç TEST {i}: {test_case['description']}")
        print(f"Query: '{test_case['query']}'")
        print(f"Expected: {test_case['expected']}")
        print("-" * 50)
        
        try:
            result = await rag_service.process_query(
                query=test_case['query'],
                session_id=f"test_medium_confidence_{i}"
            )
            
            # Check if clarification was triggered
            if result.get('status') == 'clarification_needed':
                print(f"‚úÖ PASS: Clarification triggered correctly")
                print(f"   Clarification type: {result.get('clarification_type')}")
                if 'options' in result:
                    print(f"   Options provided: {len(result['options'])}")
            elif result.get('status') == 'success':
                print(f"‚ùå FAIL: Query was routed instead of clarification")
                print(f"   Response length: {len(result.get('response', ''))}")
                print(f"   Router confidence: {result.get('debug_info', {}).get('router_confidence')}")
            else:
                print(f"‚ö†Ô∏è UNKNOWN: Unexpected result status: {result.get('status')}")
                
        except Exception as e:
            print(f"üí• ERROR: {e}")
            
    print("\n" + "=" * 60)
    print("üéØ SUMMARY: Medium confidence queries should now trigger clarification")
    print("   instead of proceeding with potentially incorrect routing.")

if __name__ == "__main__":
    asyncio.run(test_medium_confidence_clarification())
