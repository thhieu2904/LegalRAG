"""
Test script ƒë·ªÉ ki·ªÉm tra c√°c s·ª≠a ƒë·ªïi Stateful Router
Ba v·∫•n ƒë·ªÅ ch√≠nh ƒë√£ ƒë∆∞·ª£c s·ª≠a:
1. Logic ghi ƒë√® ng·ªØ c·∫£nh trong OptimizedChatSession
2. Ng∆∞·ª°ng tin c·∫≠y cao v√† l∆∞u ng·ªØ c·∫£nh h·ªôi tho·∫°i 
3. Filter b·ªã "ƒë√°nh r∆°i" trong vector search

Test case: ƒêƒÉng k√Ω khai sinh + c√≥ t·ªën ph√≠ kh√¥ng?
"""

import requests
import json
import time
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BASE_URL = "http://localhost:8000"

def test_stateful_router_fixes():
    """Test c√°c s·ª≠a ƒë·ªïi Stateful Router v·ªõi c√¢u h·ªèi li√™n ti·∫øp"""
    
    print("üî• TESTING STATEFUL ROUTER FIXES")
    print("="*60)
    
    # Test session
    session_id = f"test_stateful_{int(time.time())}"
    # http://localhost:8000/api/v2/optimized-query
    # C√¢u h·ªèi ƒë·∫ßu ti√™n - T·∫°o ng·ªØ c·∫£nh
    print("\nüìù Test 1: C√¢u h·ªèi t·∫°o ng·ªØ c·∫£nh")
    query1 = "Th·ªß t·ª•c ƒëƒÉng k√Ω khai sinh c·∫ßn gi·∫•y t·ªù g√¨?"

    response1 = requests.post(f"{BASE_URL}/api/v2/optimized-query", json={
        "query": query1,
        "session_id": session_id
    })
    
    print(f"Query 1: {query1}")
    if response1.status_code == 200:
        result1 = response1.json()
        print(f"‚úÖ Response 1: {result1.get('answer', '')[:200]}...")
        routing_info1 = result1.get('routing_info', {})
        print(f"üìä Routing confidence: {routing_info1.get('confidence', 0):.3f}")
        print(f"üìä Collection: {routing_info1.get('target_collection', 'Unknown')}")
        print(f"üìä Filters: {routing_info1.get('inferred_filters', {})}")
    else:
        print(f"‚ùå Error 1: {response1.status_code}")
        return
    
    # Ch·ªù 2 gi√¢y
    print("\n‚è±Ô∏è Ch·ªù 2 gi√¢y...")
    time.sleep(2)
    
    # C√¢u h·ªèi th·ª© hai - Test Stateful Router
    print("\nüìù Test 2: C√¢u h·ªèi follow-up (test stateful router)")
    query2 = "c√≥ t·ªën ph√≠ kh√¥ng?"

    response2 = requests.post(f"{BASE_URL}/optimized-query", json={
        "query": query2,
        "session_id": session_id
    })
    
    print(f"Query 2: {query2}")
    if response2.status_code == 200:
        result2 = response2.json()
        print(f"‚úÖ Response 2: {result2.get('answer', '')[:200]}...")
        routing_info2 = result2.get('routing_info', {})
        print(f"üìä Routing confidence: {routing_info2.get('confidence', 0):.3f}")
        print(f"üìä Original confidence: {routing_info2.get('original_confidence', 0):.3f}")
        print(f"üìä Was overridden: {routing_info2.get('was_overridden', False)}")
        print(f"üìä Collection: {routing_info2.get('target_collection', 'Unknown')}")
        print(f"üìä Filters: {routing_info2.get('inferred_filters', {})}")
        
        # Ki·ªÉm tra c√°c c·∫£i thi·ªán
        was_overridden = routing_info2.get('was_overridden', False)
        has_filters = bool(routing_info2.get('inferred_filters', {}))
        confidence = routing_info2.get('confidence', 0)
        
        print(f"\nüîç ANALYSIS:")
        print(f"   - Stateful Override Working: {'‚úÖ' if was_overridden else '‚ùå'}")
        print(f"   - Filters Applied: {'‚úÖ' if has_filters else '‚ùå'}")
        print(f"   - Good Confidence: {'‚úÖ' if confidence >= 0.7 else '‚ùå'}")
        
        if was_overridden:
            print(f"   üî• STATEFUL ROUTER SUCCESS: ƒê√£ ghi ƒë√® t·ª´ {routing_info2.get('original_confidence', 0):.3f} -> {confidence:.3f}")
        
        if has_filters:
            print(f"   üéØ FILTERS SUCCESS: {routing_info2.get('inferred_filters', {})}")
        
    else:
        print(f"‚ùå Error 2: {response2.status_code}")
        return
    
    # Test c√¢u h·ªèi th·ª© ba - Test threshold m·ªõi
    print("\nüìù Test 3: C√¢u h·ªèi kh√°c ƒë·ªÉ test threshold m·ªõi")
    query3 = "Th·ªß t·ª•c ch·ª©ng th·ª±c ch·ªØ k√Ω nh∆∞ th·∫ø n√†o?"

    response3 = requests.post(f"{BASE_URL}/optimized-query", json={
        "query": query3,
        "session_id": session_id
    })
    
    print(f"Query 3: {query3}")
    if response3.status_code == 200:
        result3 = response3.json()
        routing_info3 = result3.get('routing_info', {})
        print(f"üìä Routing confidence: {routing_info3.get('confidence', 0):.3f}")
        print(f"üìä Collection: {routing_info3.get('target_collection', 'Unknown')}")
        
        # Ki·ªÉm tra ng∆∞·ª°ng m·ªõi (0.80 thay v√¨ 0.85)
        confidence = routing_info3.get('confidence', 0)
        if confidence >= 0.80:
            print(f"   ‚úÖ HIGH CONFIDENCE v·ªõi ng∆∞·ª°ng m·ªõi (0.80): {confidence:.3f}")
        elif confidence >= 0.50:
            print(f"   ‚ö†Ô∏è MEDIUM CONFIDENCE: {confidence:.3f}")
        else:
            print(f"   ‚ùå LOW CONFIDENCE: {confidence:.3f}")
    else:
        print(f"‚ùå Error 3: {response3.status_code}")
    
    print(f"\nüéØ TEST COMPLETED - Session: {session_id}")

def test_specific_override_logic():
    """Test c·ª• th·ªÉ logic override m·ªõi"""
    print("\n\nüî• TESTING SPECIFIC OVERRIDE LOGIC")
    print("="*60)
    
    # Simulate c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
    test_cases = [
        {
            "name": "Case 1: High context, medium current -> Should override",
            "last_confidence": 0.82,
            "current_confidence": 0.74,
            "expected_override": True
        },
        {
            "name": "Case 2: High context, very high current -> Should NOT override", 
            "last_confidence": 0.85,
            "current_confidence": 0.83,
            "expected_override": False
        },
        {
            "name": "Case 3: Medium context, low current -> Should NOT override",
            "last_confidence": 0.76,
            "current_confidence": 0.60,
            "expected_override": False
        },
        {
            "name": "Case 4: Good context, medium current -> Should override",
            "last_confidence": 0.79,
            "current_confidence": 0.70,
            "expected_override": True
        }
    ]
    
    for case in test_cases:
        print(f"\nüìä {case['name']}")
        print(f"   Last confidence: {case['last_confidence']}")
        print(f"   Current confidence: {case['current_confidence']}")
        print(f"   Expected override: {case['expected_override']}")
        
        # Logic m·ªõi ƒë∆∞·ª£c implement
        VERY_HIGH_CONFIDENCE_GATE = 0.82
        MIN_CONTEXT_CONFIDENCE = 0.78
        
        should_override = (
            case['current_confidence'] < VERY_HIGH_CONFIDENCE_GATE and 
            case['last_confidence'] >= MIN_CONTEXT_CONFIDENCE
        )
        
        result = "‚úÖ CORRECT" if should_override == case['expected_override'] else "‚ùå WRONG"
        print(f"   Actual override: {should_override} {result}")

if __name__ == "__main__":
    print("üöÄ Starting Stateful Router Fix Tests...")
    
    # Test logic tr∆∞·ªõc
    test_specific_override_logic()
    
    # Test th·ª±c t·∫ø v·ªõi backend
    try:
        test_stateful_router_fixes()
    except Exception as e:
        print(f"‚ùå Error testing backend: {e}")
        print("üí° Make sure backend is running on localhost:8000")
