import logging
import os
import time
from pathlib import Path
from typing import List, Dict, Any, Tuple, Optional
from sentence_transformers import CrossEncoder
import numpy as np
from ..core.config import settings

logger = logging.getLogger(__name__)

class RerankerService:
    """Service qu·∫£n l√Ω Vietnamese Reranker model ƒë·ªÉ ch·∫•m l·∫°i ƒë·ªô li√™n quan"""
    
    def __init__(self, model_name: Optional[str] = None):
        self.model_name = model_name or settings.reranker_model_name
        self.model = None
        
        # Config ƒë√£ setup environment r·ªìi, kh√¥ng c·∫ßn _setup_cache n·ªØa
        self._load_model()
    
    def _load_model(self):
        """Load model t·ª´ cache local ho·∫∑c download n·∫øu c·∫ßn - GPU for optimal performance"""
        try:
            logger.info(f"Loading reranker model: {self.model_name}")
            
            # Th·ª≠ load t·ª´ local cache tr∆∞·ªõc - s·ª≠ d·ª•ng GPU v·ªõi max_length=512
            local_model_path = self._get_local_model_path()
            if local_model_path and local_model_path.exists():
                logger.info(f"Found local model at: {local_model_path}")
                try:
                    # üöÄ PERFORMANCE OPTIMIZATION: Gi·ªõi h·∫°n max_length=512 ƒë·ªÉ tƒÉng t·ªëc
                    self.model = CrossEncoder(str(local_model_path), device='cuda:0', max_length=512)
                    logger.info("Reranker model loaded successfully from local cache on GPU (max_length=512)")
                    return
                except Exception as e:
                    logger.warning(f"Failed to load from local cache on GPU: {e}")
            
            # Fallback: load t·ª´ HuggingFace v·ªõi max_length=512
            logger.info("Loading from HuggingFace (may download) on GPU with optimized settings")
            self.model = CrossEncoder(self.model_name, device='cuda:0', max_length=512)
            logger.info("Reranker model loaded successfully from HuggingFace on GPU (max_length=512)")
            
        except Exception as e:
            logger.error(f"Failed to load reranker model: {e}")
            self.model = None
            raise
    
    def _get_local_model_path(self):
        """T√¨m ƒë∆∞·ªùng d·∫´n local model n·∫øu c√≥"""
        try:
            # S·ª≠ d·ª•ng config path
            cache_hub_path = settings.hf_cache_path / "hub"
            model_dir = cache_hub_path / "models--AITeamVN--Vietnamese_Reranker"
            
            if model_dir.exists():
                # T√¨m snapshot directory
                snapshots_dir = model_dir / "snapshots"
                if snapshots_dir.exists():
                    # L·∫•y snapshot m·ªõi nh·∫•t
                    snapshot_dirs = [d for d in snapshots_dir.iterdir() if d.is_dir()]
                    if snapshot_dirs:
                        latest_snapshot = max(snapshot_dirs, key=lambda x: x.stat().st_mtime)
                        logger.info(f"Found local snapshot: {latest_snapshot}")
                        return latest_snapshot
            
            return None
        except Exception as e:
            logger.warning(f"Error finding local model path: {e}")
            return None
    
    def rerank_documents(
        self, 
        query: str, 
        documents: List[Dict[str, Any]], 
        top_k: Optional[int] = None,
        router_confidence: Optional[float] = None,
        router_confidence_level: Optional[str] = None
    ) -> List[Dict[str, Any]]:
        """
        Rerank danh s√°ch documents d·ª±a tr√™n ƒë·ªô li√™n quan v·ªõi query
        
        Args:
            query: C√¢u h·ªèi c·∫ßn t√¨m
            documents: Danh s√°ch documents c·∫ßn rerank
            top_k: S·ªë l∆∞·ª£ng documents t·ªët nh·∫•t c·∫ßn tr·∫£ v·ªÅ (n·∫øu None th√¨ tr·∫£ v·ªÅ t·∫•t c·∫£)
            router_confidence: Confidence score t·ª´ router (0.0-1.0)
            router_confidence_level: Level t·ª´ router ('low', 'medium', 'high')
        
        Returns:
            Danh s√°ch documents ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp l·∫°i theo ƒë·ªô li√™n quan
        """
        if not self.model:
            logger.warning("Reranker model not loaded, returning original order")
            return documents[:top_k] if top_k else documents
        
        if not documents:
            return []
        
        # üõ°Ô∏è ROUTER TRUST MODE: Khi router c√≥ HIGH confidence, tin t∆∞·ªüng router h∆°n
        trust_router = (router_confidence_level == 'high' and router_confidence and router_confidence >= 0.85)
        if trust_router:
            logger.info(f"üõ°Ô∏è ROUTER TRUST MODE: Router confidence {router_confidence:.3f} (HIGH) - Minimal rerank interference")
        
        try:
            # üîç DEBUG: Log s·ªë l∆∞·ª£ng documents v√† th·ªùi gian rerank
            rerank_start_time = time.time()
            logger.info(f"üîç RERANK QUERY: '{query}' ({len(query)} chars)")
            logger.info(f"üî¢ RERANK INPUT: {len(documents)} documents to process")
            
            # üöÄ PERFORMANCE OPTIMIZATION: Lo·∫°i b·ªè CPU preprocessing 
            # Chu·∫©n b·ªã pairs (query, document_content) tr·ª±c ti·∫øp cho reranker
            pairs = []
            for i, doc in enumerate(documents):
                content = doc['content']
                
                # üöÄ MINIMAL PROCESSING: Ch·ªâ truncate v√† clean c∆° b·∫£n
                # ƒê·ªÉ CrossEncoder t·ª± x·ª≠ l√Ω v·ªõi max_length=512 ƒë√£ ƒë∆∞·ª£c set
                cleaned_content = content.replace("**", "").replace("*", "").replace("#", "")
                cleaned_content = " ".join(cleaned_content.split())  # Normalize whitespace
                
                # Truncate n·∫øu qu√° d√†i (backup cho max_length limit)
                if len(cleaned_content) > 1000:  # Soft limit tr∆∞·ªõc khi tokenization
                    cleaned_content = cleaned_content[:1000] + "..."
                
                logger.info(f"üîç RERANK DOC[{i}]: {len(cleaned_content)} chars")
                pairs.append((query, cleaned_content))
            
            # T√≠nh rerank scores
            logger.info(f"üî• RERANKING {len(documents)} documents with optimized settings...")
            scores = self.model.predict(pairs)
            rerank_time = time.time() - rerank_start_time
            logger.info(f"‚è±Ô∏è RERANK COMPLETED in {rerank_time:.2f}s ({len(documents)} docs)")
            
            # G√°n ƒëi·ªÉm rerank v√†o m·ªói document
            reranked_docs = []
            for doc, score in zip(documents, scores):
                doc_copy = doc.copy()
                doc_copy['rerank_score'] = float(score)
                reranked_docs.append(doc_copy)
            
            # S·∫Øp x·∫øp theo rerank score gi·∫£m d·∫ßn
            reranked_docs.sort(key=lambda x: x['rerank_score'], reverse=True)
            
            # Log th√¥ng tin v·ªÅ top document
            if reranked_docs:
                top_doc = reranked_docs[0]
                logger.info(f"Top document after reranking: score={top_doc['rerank_score']:.4f}, "
                          f"similarity={top_doc.get('similarity', 'N/A')}")
                
                # üõ°Ô∏è ROUTER TRUST MODE: Kh√¥ng trigger conservative strategy khi router HIGH confidence
                if trust_router:
                    logger.info(f"üõ°Ô∏è TRUSTING ROUTER: Accepting rerank results without conservative override (router: {router_confidence:.3f})")
                elif top_doc['rerank_score'] < 0.2:
                    logger.warning(f"‚ö†Ô∏è  LOW RERANK SCORE ({top_doc['rerank_score']:.4f}) - Conservative strategy may be triggered")
            
            # Tr·∫£ v·ªÅ top_k documents n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            if top_k:
                return reranked_docs[:top_k]
            
            return reranked_docs
            
        except Exception as e:
            logger.error(f"Error during reranking: {e}")
            # Fallback v·ªÅ s·∫Øp x·∫øp theo similarity score ban ƒë·∫ßu
            return sorted(documents, key=lambda x: x.get('similarity', 0), reverse=True)[:top_k] if top_k else documents
    
    # üóëÔ∏è REMOVED: CPU intensive preprocessing functions
    # _extract_query_keywords() v√† _extract_relevant_content() ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè
    # ƒë·ªÉ t·ªëi ∆∞u h√≥a performance v√† ƒë·ªÉ GPU CrossEncoder t·ª± x·ª≠ l√Ω
    
    def get_best_document(self, query: str, documents: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """
        T√¨m document c√≥ ƒë·ªô li√™n quan cao nh·∫•t v·ªõi query
        
        Args:
            query: C√¢u h·ªèi c·∫ßn t√¨m
            documents: Danh s√°ch documents c·∫ßn ƒë√°nh gi√°
        
        Returns:
            Document c√≥ ƒëi·ªÉm rerank cao nh·∫•t
        """
        reranked = self.rerank_documents(query, documents, top_k=1)
        return reranked[0] if reranked else None
    
    def is_loaded(self) -> bool:
        """Ki·ªÉm tra xem model ƒë√£ ƒë∆∞·ª£c load ch∆∞a"""
        return self.model is not None
    
    def get_model_info(self) -> Dict[str, Any]:
        """L·∫•y th√¥ng tin v·ªÅ model"""
        return {
            'model_name': self.model_name,
            'is_loaded': self.is_loaded(),
            'model_type': 'CrossEncoder' if self.model else None
        }
