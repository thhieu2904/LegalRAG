# file: backend/verify_embeddings.py
import logging
import sys
from pathlib import Path
import numpy as np

# Th√™m ƒë∆∞·ªùng d·∫´n 'backend' v√†o sys.path ƒë·ªÉ import t·ª´ 'app'
current_dir = Path(__file__).parent
if str(current_dir) not in sys.path:
    sys.path.append(str(current_dir))

import chromadb
from app.core.config import settings

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def verify_data_in_db():
    logging.info("--- B·∫ÆT ƒê·∫¶U KI·ªÇM TRA D·ªÆ LI·ªÜU V√Ä EMBEDDING TRONG DATABASE ---")
    logging.info(f"ƒêang k·∫øt n·ªëi t·ªõi database t·∫°i: {settings.chroma_persist_directory}")

    try:
        client = chromadb.PersistentClient(path=settings.chroma_persist_directory)
        collections = client.list_collections()

        if not collections:
            logging.warning("Kh√¥ng t√¨m th·∫•y collection n√†o trong database.")
            return

        logging.info(f"T√¨m th·∫•y {len(collections)} collection(s).")

        for collection_obj in collections:
            collection_name = collection_obj.name
            logging.info(f"\n=========================================")
            logging.info(f"üî¨ ƒêang ki·ªÉm tra collection: '{collection_name}'")
            logging.info(f"=========================================")

            count = collection_obj.count()
            if count == 0:
                logging.warning("Collection n√†y r·ªóng.")
                continue

            logging.info(f"Collection c√≥ {count} m·ª•c. L·∫•y 3 m·ª•c ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra...")

            # L·∫•y d·ªØ li·ªáu bao g·ªìm c·∫£ documents v√† embeddings
            items = collection_obj.get(
                limit=3,
                include=["documents", "embeddings", "metadatas"]
            )

            for i in range(len(items['ids'])):
                doc_id = items['ids'][i]
                document = items['documents'][i]
                embedding = items['embeddings'][i]
                metadata = items['metadatas'][i]

                logging.info(f"\n--- M·ª•c #{i+1} (ID: {doc_id}) ---")
                logging.info(f"   üìÑ Document (preview): '{document[:150].strip().replace(chr(10), ' ')}...'")
                logging.info(f"   üîñ Metadata (title): {metadata.get('document_title', 'N/A')}")
                
                if embedding:
                    # Chuy·ªÉn th√†nh numpy array ƒë·ªÉ ki·ªÉm tra
                    embedding_np = np.array(embedding)
                    is_all_zeros = np.all(embedding_np == 0)

                    logging.info(f"   üß¨ Embedding (10 gi√° tr·ªã ƒë·∫ßu): {embedding_np[:10]}")
                    
                    if is_all_zeros:
                        logging.error("   üö® C·∫¢NH B√ÅO: EMBEDDING N√ÄY TO√ÄN S·ªê 0! ƒê√ÇY L√Ä NGUY√äN NH√ÇN G√ÇY L·ªñI.")
                    else:
                        logging.info("   üëç Embedding c√≥ v·∫ª h·ª£p l·ªá (kh√°c 0).")
                else:
                    logging.error("   üö® L·ªñI: Kh√¥ng c√≥ embedding cho m·ª•c n√†y.")

    except Exception as e:
        logging.error(f"L·ªói nghi√™m tr·ªçng khi th·ª±c thi: {e}", exc_info=True)

if __name__ == "__main__":
    verify_data_in_db()