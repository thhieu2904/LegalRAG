"""
Optimized Enhanced Main.py v·ªõi VRAM-optimized architecture
- Embedding Model: CPU (ti·∫øt ki·ªám VRAM)
- LLM: GPU (c·∫ßn song song h√≥a)
- Reranker: GPU (c·∫ßn song song h√≥a)
- Ambiguous Query Detection
- Enhanced Context Expansion
"""

import logging
import uvicorn
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

from app.core.config import settings
from app.services.vector import VectorDBService
from app.services.language_model import LLMService
from app.services.rag_engine import RAGService
from app.api import rag
from app.api import documents
from app.api import router_business_api

# C·∫•u h√¨nh logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Global services
vectordb_service = None
llm_service = None
rag_service = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Qu·∫£n l√Ω lifecycle v·ªõi VRAM-optimized architecture"""
    # Startup
    logger.info("üöÄ Starting VRAM-Optimized LegalRAG API...")
    
    try:
        # Kh·ªüi t·∫°o services theo th·ª© t·ª± t·ªëi ∆∞u VRAM
        global vectordb_service, llm_service, rag_service
        logger.info("Initializing VRAM-optimized services...")
        
        # 1. VectorDB Service (Embedding Model s·∫Ω ƒë∆∞·ª£c chuy·ªÉn sang CPU)
        logger.info("üîß Initializing VectorDB service with CPU embedding...")
        vectordb_service = VectorDBService()
        logger.info("‚úÖ VectorDB service initialized (Embedding: CPU)")
        
        # 2. LLM Service (GPU cho generation tasks)
        logger.info("üîß Initializing LLM service on GPU...")
        llm_service = LLMService()
        logger.info("‚úÖ LLM service initialized (LLM: GPU)")
        
        # 3. Optimized Enhanced RAG Service
        logger.info("üîß Initializing Optimized Enhanced RAG service...")
        documents_dir = settings.base_dir / "data" / "documents"  
        rag_service = RAGService(
            documents_dir=str(documents_dir),
            vectordb_service=vectordb_service,
            llm_service=llm_service
        )
        logger.info("‚úÖ Optimized Enhanced RAG service initialized")
        
        # Set global service for routes
        rag.rag_service = rag_service
        
        # Log system capabilities v·ªõi th√¥ng tin VRAM optimization
        health_status = rag_service.get_health_status()
        logger.info("üìä VRAM-Optimized System Status:")
        logger.info(f"  - Collections: {health_status.get('total_collections', 0)}")
        logger.info(f"  - Documents: {health_status.get('total_documents', 0)}")
        logger.info(f"  - LLM (GPU): {health_status.get('llm_loaded', False)}")
        logger.info(f"  - Reranker (GPU): {health_status.get('reranker_loaded', False)}")
        logger.info(f"  - Embedding (CPU): {health_status.get('embedding_device', 'N/A')}")
        logger.info(f"  - Active Sessions: {health_status.get('active_sessions', 0)}")
        logger.info(f"  - Ambiguous Patterns: {health_status.get('ambiguous_patterns', 0)}")
        logger.info(f"  - Context Expansion Cache: {health_status.get('context_expansion', {}).get('total_chunks_cached', 0)} chunks")
        
        logger.info("üéâ VRAM-Optimized LegalRAG API started successfully!")
        logger.info("üí° Architecture: Embedding(CPU) + LLM(GPU) + Reranker(GPU)")
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize Optimized services: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üîÑ Shutting down VRAM-Optimized LegalRAG API...")
    
    # Cleanup sessions if needed
    if rag_service:
        active_sessions = len(rag_service.chat_sessions)
        if active_sessions > 0:
            logger.info(f"Cleaning up {active_sessions} active chat sessions...")
            rag_service.chat_sessions.clear()

# T·∫°o Optimized FastAPI app
app = FastAPI(
    title=f"{settings.app_name} (VRAM-Optimized)",
    version=f"{settings.app_version}-vram-optimized",
    description="""
    üöÄ **VRAM-Optimized LegalRAG** - H·ªá th·ªëng h·ªèi ƒë√°p th√¥ng minh t·ªëi ∆∞u b·ªô nh·ªõ
    
    ## üß† **VRAM Optimization Architecture:**
    - **Embedding Model**: CPU (ti·∫øt ki·ªám VRAM cho queries ng·∫Øn)
    - **LLM Model**: GPU (t·∫≠n d·ª•ng song song h√≥a cho context d√†i)  
    - **Reranker Model**: GPU (t·∫≠n d·ª•ng song song h√≥a cho multiple comparisons)
    
    ## üî• **Enhanced Features:**
    - **üéØ Smart Ambiguous Detection**: T·ª± ƒë·ªông ph√°t hi·ªán c√¢u h·ªèi m∆° h·ªì
    - **üß© Nucleus Context Expansion**: M·ªü r·ªông context t·ª´ chunk ch√≠nh x√°c nh·∫•t
    - **üíæ Session Management**: Qu·∫£n l√Ω h·ªôi tho·∫°i th√¥ng minh
    - **‚ö° VRAM-Optimized**: Gi·∫£m 0.5-1GB VRAM usage
    - **üéõÔ∏è Hybrid Retrieval**: Broad search + Reranking + Context expansion
    
    ## üì° **Available Endpoints:**
    - `/api/v2/optimized-query` - Query ch√≠nh v·ªõi t·ªëi ∆∞u VRAM
    - `/api/v2/clarify` - X·ª≠ l√Ω c√¢u tr·∫£ l·ªùi l√†m r√µ
    - `/api/v2/session/create` - T·∫°o session chat
    - `/api/v2/session/{id}` - Qu·∫£n l√Ω session
    - `/api/v2/health` - Tr·∫°ng th√°i h·ªá th·ªëng
    - `/api/v2/ambiguous-patterns` - Qu·∫£n l√Ω patterns c√¢u h·ªèi m∆° h·ªì
    - `/api/v2/context-expansion/stats` - Th·ªëng k√™ context expansion
    
    ## üî¨ **Technical Details:**
    - **Context Window**: 4096 tokens (t·ªëi ∆∞u cho 6GB VRAM)
    - **Max Generation**: 1024 tokens
    - **Temperature**: 0.2 (c√¢n b·∫±ng ch√≠nh x√°c vs ƒëa d·∫°ng)
    - **Reranking**: Top-5 nucleus chunks
    - **Context Expansion**: Full document t·ª´ nucleus chunks
    """,
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# C·∫•u h√¨nh CORS v·ªõi enhanced headers
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Trong production n√™n gi·ªõi h·∫°n origins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Include optimized routes
app.include_router(rag.router)
app.include_router(documents.router)

# Include Business API
try:
    app.include_router(router_business_api.router, prefix="/api/business")
    logger.info("‚úÖ Business API endpoints enabled")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Business API not available: {e}")

# Include Router CRUD API
try:
    from app.api.router_crud import router as router_crud_router
    app.include_router(router_crud_router)
    logger.info("‚úÖ Router CRUD API endpoints enabled")
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Router CRUD API not available: {e}")

# Root endpoint v·ªõi th√¥ng tin VRAM optimization
@app.get("/")
async def root():
    return {
        "message": "VRAM-Optimized LegalRAG API",
        "version": f"{settings.app_version}-vram-optimized",
        "description": "H·ªá th·ªëng h·ªèi ƒë√°p ph√°p lu·∫≠t v·ªõi ki·∫øn tr√∫c t·ªëi ∆∞u VRAM",
        "architecture": {
            "embedding_model": "CPU (ti·∫øt ki·ªám VRAM)",
            "llm_model": "GPU (song song h√≥a)", 
            "reranker_model": "GPU (song song h√≥a)"
        },
        "status": "running",
        "endpoints": {
            "query": "/api/v1/query",
            "collections": "/router/collections", 
            "business": "/api/business/collections",
            "health": "/health"
        }
    }

# Health endpoint
@app.get("/health")
async def health():
    if rag_service:
        return rag_service.get_health_status()
    else:
        return {"status": "starting", "message": "Services are initializing..."}

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level="info"
    )
