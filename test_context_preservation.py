#!/usr/bin/env python3
"""
üîß Test Context Preservation Fix
=================================

Test scenario: Manual input v·ªõi context preservation thay v√¨ clear session

Test Cases:
- Case 1: Query m∆° h·ªì ‚Üí Ch·ªçn collection ‚Üí Manual input ‚Üí Verify collection preserved
- Case 2: Query m∆° h·ªì ‚Üí Kh√¥ng ch·ªçn collection ‚Üí Manual input ‚Üí Verify session cleared (fallback)

Author: LegalRAG Team
"""

import requests
import json

def test_context_preservation():
    """Test context preservation trong manual input"""
    
    print("üîß TESTING CONTEXT PRESERVATION FIX")
    print("=" * 60)
    
    base_url = "http://localhost:8000"
    
    # Test server connection
    try:
        response = requests.get(f"{base_url}/docs")
        if response.status_code != 200:
            print("‚ùå Server kh√¥ng ch·∫°y")
            return False
        print("‚úÖ Server ƒëang ch·∫°y")
    except Exception as e:
        print(f"‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi server: {e}")
        return False
    
    # ===== TEST CASE 1: Context Preservation =====
    print(f"\n{'='*60}")
    print("üß™ TEST CASE 1: CONTEXT PRESERVATION")
    print("Query m∆° h·ªì ‚Üí Ch·ªçn collection ‚Üí Manual input ‚Üí Verify preservation")
    print("="*60)
    
    # Step 1: T·∫°o session
    print("\nüìù Step 1: T·∫°o session")
    session_payload = {}
    try:
        session_response = requests.post(f"{base_url}/api/v2/session/create", json=session_payload)
        if session_response.status_code == 200:
            session_result = session_response.json()
            session_id = session_result.get("session_id", "test_session_1")
            print(f"   ‚úÖ Session created: {session_id}")
        else:
            session_id = "test_session_1"
            print(f"   ‚ö†Ô∏è  Using fallback session ID")
    except Exception as e:
        session_id = "test_session_1"
        print(f"   ‚ö†Ô∏è  Using fallback session ID: {e}")
    
    # Step 2: Query m∆° h·ªì ƒë·ªÉ trigger clarification
    print(f"\nüìù Step 2: Query m∆° h·ªì ƒë·ªÉ trigger clarification")
    query1 = "t√¥i mu·ªën h·ªèi v·ªÅ th·ªß t·ª•c ƒëƒÉng k√Ω"
    
    payload1 = {
        "query": query1,
        "session_id": session_id
    }
    
    response1 = requests.post(f"{base_url}/api/v2/optimized-query", json=payload1)
    print(f"   Query: '{query1}'")
    print(f"   Status: {response1.status_code}")
    
    if response1.status_code != 200:
        print(f"   ‚ùå Query 1 failed: {response1.status_code}")
        print(f"   Response: {response1.text[:200]}...")
        return False
    
    result1 = response1.json()
    if result1.get("type") != "clarification_needed":
        print(f"   ‚ùå Expected clarification, got: {result1.get('type')}")
        return False
    
    print(f"   ‚úÖ Got clarification with {len(result1.get('clarification', {}).get('options', []))} options")
    
    # Step 3: Ch·ªçn collection (ho_tich_cap_xa)
    print(f"\nüìù Step 3: User ch·ªçn collection ho_tich_cap_xa")
    
    clarification = result1.get("clarification", {})
    options = clarification.get("options", [])
    
    # T√¨m option cho ho_tich_cap_xa
    ho_tich_option = None
    for option in options:
        if option.get('collection') == 'ho_tich_cap_xa':
            ho_tich_option = option
            break
    
    if not ho_tich_option:
        print("   ‚ùå Kh√¥ng t√¨m th·∫•y option cho ho_tich_cap_xa")
        return False
    
    print(f"   ‚úÖ Found option: {ho_tich_option.get('title', 'Unknown')}")
    
    # Send clarification v·ªõi collection selection
    clarify_payload1 = {
        "session_id": session_id,
        "selected_option": ho_tich_option,
        "original_query": query1
    }
    
    clarify_response1 = requests.post(f"{base_url}/api/v2/clarify", json=clarify_payload1)
    print(f"   Collection selection status: {clarify_response1.status_code}")
    
    if clarify_response1.status_code != 200:
        print(f"   ‚ùå Collection selection failed: {clarify_response1.status_code}")
        return False
    
    clarify_result1 = clarify_response1.json()
    generated_questions = clarify_result1.get('generated_questions', [])
    if generated_questions:
        print(f"   ‚úÖ Got {len(generated_questions)} suggested questions")
    else:
        print(f"   ‚úÖ Collection selection successful (type: {clarify_result1.get('type', 'unknown')})")
    
    # Step 4: Manual input (v·ªõi collection context)
    print(f"\nüìù Step 4: User ch·ªçn manual input (context should be preserved)")
    
    # T√¨m manual input option t·ª´ clarification ho·∫∑c t·∫°o synthetic
    manual_input_option = {
        "id": "manual",
        "title": "T√¥i mu·ªën m√¥ t·∫£ r√µ h∆°n",
        "action": "manual_input",
        "collection": "ho_tich_cap_xa"  # üîß KEY: Collection context
    }
    
    manual_payload = {
        "session_id": session_id,
        "selected_option": manual_input_option,
        "original_query": query1
    }
    
    manual_response = requests.post(f"{base_url}/api/v2/clarify", json=manual_payload)
    print(f"   Manual input status: {manual_response.status_code}")
    
    if manual_response.status_code != 200:
        print(f"   ‚ùå Manual input failed: {manual_response.status_code}")
        print(f"   Response: {manual_response.text[:200]}...")
        return False
    
    manual_result = manual_response.json()
    context_preserved = manual_result.get('context_preserved', False)
    preserved_collection = manual_result.get('preserved_collection')
    
    print(f"   Context preserved: {context_preserved}")
    print(f"   Preserved collection: {preserved_collection}")
    
    if not context_preserved or preserved_collection != "ho_tich_cap_xa":
        print("   ‚ùå Context preservation FAILED!")
        return False
    
    print("   ‚úÖ Context preservation SUCCESS!")
    
    # Step 5: Next query ƒë·ªÉ verify context ƒë∆∞·ª£c s·ª≠ d·ª•ng
    print(f"\nüìù Step 5: Next query ƒë·ªÉ verify context override")
    query2 = "k·∫øt h√¥n c√≥ t·ªën ph√≠ kh√¥ng"
    
    payload2 = {
        "query": query2,
        "session_id": session_id
    }
    
    response2 = requests.post(f"{base_url}/api/v2/optimized-query", json=payload2)
    print(f"   Query: '{query2}'")
    print(f"   Status: {response2.status_code}")
    
    if response2.status_code != 200:
        print(f"   ‚ùå Query 2 failed: {response2.status_code}")
        return False
    
    result2 = response2.json()
    routing_info = result2.get('routing_info', {})
    target_collection = routing_info.get('target_collection')
    was_overridden = routing_info.get('was_overridden', False)
    
    print(f"   Target collection: {target_collection}")
    print(f"   Was overridden: {was_overridden}")
    
    if target_collection == "ho_tich_cap_xa" and was_overridden:
        print("   ‚úÖ EXCELLENT: Context override worked! Session preserved collection.")
        return True
    elif target_collection == "ho_tich_cap_xa":
        print("   ‚úÖ GOOD: Routed to correct collection (may be natural match)")
        return True
    else:
        print(f"   ‚ö†Ô∏è  Routed to different collection: {target_collection}")
        return False

def test_fallback_clear():
    """Test fallback clear khi kh√¥ng c√≥ collection context"""
    
    print(f"\n{'='*60}")
    print("üß™ TEST CASE 2: FALLBACK CLEAR (No Collection Context)")
    print("Query m∆° h·ªì ‚Üí Manual input ngay ‚Üí Verify session cleared")
    print("="*60)
    
    base_url = "http://localhost:8000"
    
    # Step 1: T·∫°o session
    print("\nüìù Step 1: T·∫°o session")
    session_id = "test_session_2"
    
    # Step 2: Manual input kh√¥ng c√≥ collection context
    print(f"\nüìù Step 2: Manual input without collection context")
    
    manual_input_option = {
        "id": "manual",
        "title": "T√¥i mu·ªën m√¥ t·∫£ r√µ h∆°n",
        "action": "manual_input",
        "collection": None  # üîß KEY: No collection context
    }
    
    manual_payload = {
        "session_id": session_id,
        "selected_option": manual_input_option,
        "original_query": "c√¢u h·ªèi m∆° h·ªì"
    }
    
    manual_response = requests.post(f"{base_url}/api/v2/clarify", json=manual_payload)
    print(f"   Manual input status: {manual_response.status_code}")
    
    if manual_response.status_code != 200:
        print(f"   ‚ùå Manual input failed: {manual_response.status_code}")
        return False
    
    manual_result = manual_response.json()
    context_preserved = manual_result.get('context_preserved', True)  # Default True ƒë·ªÉ test False
    
    print(f"   Context preserved: {context_preserved}")
    
    if context_preserved:
        print("   ‚ùå Fallback clear FAILED! Context should be cleared.")
        return False
    
    print("   ‚úÖ Fallback clear SUCCESS!")
    return True

if __name__ == "__main__":
    print("üîß CONTEXT PRESERVATION TEST SUITE")
    print("=" * 60)
    
    # Test Case 1: Context Preservation
    success1 = test_context_preservation()
    
    # Test Case 2: Fallback Clear  
    success2 = test_fallback_clear()
    
    print("\n" + "=" * 60)
    print("üèÜ FINAL RESULTS:")
    print(f"   Case 1 (Context Preservation): {'‚úÖ PASS' if success1 else '‚ùå FAIL'}")
    print(f"   Case 2 (Fallback Clear): {'‚úÖ PASS' if success2 else '‚ùå FAIL'}")
    
    if success1 and success2:
        print("\nüéâ ALL TESTS PASSED! Context preservation fix ho·∫°t ƒë·ªông ho√†n h·∫£o!")
    else:
        print("\n‚ùå SOME TESTS FAILED! C·∫ßn debug th√™m...")
    print("=" * 60)
