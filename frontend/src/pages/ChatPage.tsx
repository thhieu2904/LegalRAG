import React, { useState, useRef, useEffect } from "react";
import "../styles/ChatPage.css";
import { apiService } from "../services/api";

// Speech Recognition interface
interface SpeechRecognitionEvent {
  results: SpeechRecognitionResultList;
  resultIndex: number;
}

interface SpeechRecognitionResultList {
  [index: number]: SpeechRecognitionResult;
  length: number;
}

interface SpeechRecognitionResult {
  [index: number]: SpeechRecognitionAlternative;
  length: number;
  isFinal: boolean;
}

interface SpeechRecognitionAlternative {
  transcript: string;
  confidence: number;
}

interface SpeechRecognition extends EventTarget {
  continuous: boolean;
  interimResults: boolean;
  lang: string;
  onresult: (event: SpeechRecognitionEvent) => void;
  onerror: (event: any) => void;
  onend: () => void;
  start(): void;
  stop(): void;
  abort(): void;
}

declare global {
  interface Window {
    SpeechRecognition: any;
    webkitSpeechRecognition: any;
  }
}

// Enhanced ID generation system
let messageIdCounter = 0;
const generateUniqueId = (): string => {
  messageIdCounter += 1;
  return `msg_${Date.now()}_${messageIdCounter}_${Math.random()
    .toString(36)
    .substr(2, 9)}`;
};

// Professional minimal icons
const SendIcon = () => <span className="icon">‚Üí</span>;
const BotIcon = () => <span className="icon">ü§ñ</span>;
const UserIcon = () => <span className="icon">üë§</span>;
const MicIcon = () => <span className="icon">üé§</span>;
const MicOffIcon = () => <span className="icon">‚èπ</span>;

interface Message {
  id: string;
  type: "user" | "assistant" | "system";
  content: string;
  timestamp: Date;
  clarification?: ClarificationData;
  processing?: boolean;
  processingTime?: number;
  sourceDocuments?: string[];
}

interface ClarificationOption {
  id: string;
  title: string;
  description: string;
  confidence?: string;
  examples?: string[];
  action: string;
  collection?: string;
  question_text?: string;
  category?: string;
}

interface ClarificationData {
  message: string;
  options: ClarificationOption[];
  style: string;
  stage?: number;
  collection?: string;
  original_query?: string;
}

interface ContextInfo {
  nucleus_chunks: number;
  context_length: number;
  source_collections: string[];
  source_documents: string[];
}

interface ApiResponse {
  type: string;
  answer?: string;
  clarification?: ClarificationData;
  session_id: string;
  processing_time: number;
  context_info?: ContextInfo;
  error?: string;
}

interface CurrentClarification {
  clarification: ClarificationData;
  originalQuery: string;
}

const ChatPage: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: generateUniqueId(),
      type: "system",
      content:
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ph√°p lu·∫≠t AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c th·ªß t·ª•c h√†nh ch√≠nh nh∆∞ h·ªô t·ªãch, ch·ª©ng th·ª±c, v√† nu√¥i con nu√¥i. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?",
      timestamp: new Date(),
    },
  ]);

  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [currentClarification, setCurrentClarification] =
    useState<CurrentClarification | null>(null);

  // Voice recognition state
  const [isListening, setIsListening] = useState(false);
  const [recognition, setRecognition] = useState<SpeechRecognition | null>(
    null
  );

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  useEffect(() => {
    if (!isLoading && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isLoading]);

  // Initialize speech recognition
  useEffect(() => {
    if (
      typeof window !== "undefined" &&
      (window.SpeechRecognition || window.webkitSpeechRecognition)
    ) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();

      recognitionInstance.continuous = false;
      recognitionInstance.interimResults = false;
      recognitionInstance.lang = "vi-VN"; // Vietnamese language

      recognitionInstance.onresult = (event: SpeechRecognitionEvent) => {
        const transcript = event.results[0][0].transcript;
        setInputValue(transcript);
        setIsListening(false);
      };

      recognitionInstance.onerror = () => {
        setIsListening(false);
      };

      recognitionInstance.onend = () => {
        setIsListening(false);
      };

      setRecognition(recognitionInstance);
    }
  }, []);

  const startListening = () => {
    if (recognition && !isListening) {
      setIsListening(true);
      recognition.start();
    }
  };

  const stopListening = () => {
    if (recognition && isListening) {
      setIsListening(false);
      recognition.stop();
    }
  };

  const sendQuery = async (userQuery: string) => {
    if (userQuery.trim() === "" || isLoading) return;

    // Add user message with unique ID
    const userMessage: Message = {
      id: generateUniqueId(),
      type: "user",
      content: userQuery,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");
    setIsLoading(true);
    setCurrentClarification(null);

    try {
      const result = await apiService.sendQuery(userQuery, sessionId);
      setSessionId(result.session_id);
      handleApiResponse(result, userQuery);
    } catch (error) {
      console.error("Error sending query:", error);
      addAssistantMessage("Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.", true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleApiResponse = (result: ApiResponse, userQuery: string) => {
    if (result.type === "answer" && result.answer) {
      addAssistantMessage(
        result.answer,
        false,
        result.processing_time,
        result.context_info?.source_documents
      );
      setCurrentClarification(null);
    } else if (result.type === "clarification_needed" && result.clarification) {
      setCurrentClarification({
        clarification: result.clarification,
        originalQuery: result.clarification.original_query || userQuery,
      });

      const clarificationMessage =
        result.clarification.message || "Vui l√≤ng ch·ªçn m·ªôt t√πy ch·ªçn:";

      addAssistantMessage(
        clarificationMessage,
        false,
        result.processing_time,
        result.context_info?.source_documents,
        result.clarification
      );
    } else if (result.type === "no_results") {
      addAssistantMessage(
        "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi c√°ch kh√°c kh√¥ng?",
        false,
        result.processing_time,
        result.context_info?.source_documents
      );
      setCurrentClarification(null);
    } else if (result.type === "error") {
      addAssistantMessage(`C√≥ l·ªói x·∫£y ra: ${result.error}`, true);
      setCurrentClarification(null);
    }
  };

  const addAssistantMessage = (
    content: string,
    isError: boolean = false,
    processingTime?: number,
    sourceDocuments?: string[],
    clarification?: ClarificationData
  ) => {
    const assistantMessage: Message = {
      id: generateUniqueId(),
      type: isError ? "system" : "assistant",
      content: content,
      timestamp: new Date(),
      clarification: clarification,
      processingTime: processingTime,
      sourceDocuments: sourceDocuments,
    };

    setMessages((prev) => [...prev, assistantMessage]);
  };

  const handleCollectionSelection = async (
    selectedOption: ClarificationOption,
    originalQuery: string
  ) => {
    if (!sessionId) return;

    setIsLoading(true);

    try {
      const result = await apiService.sendClarificationResponse(
        sessionId,
        originalQuery,
        selectedOption
      );
      handleApiResponse(result, `ƒê√£ ch·ªçn: ${selectedOption.title}`);
    } catch (error) {
      console.error("Collection selection error:", error);
      addAssistantMessage("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa b·∫°n.", true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuestionSelection = async (
    selectedOption: ClarificationOption,
    originalQuery: string
  ) => {
    if (!sessionId) return;

    setIsLoading(true);

    try {
      const result = await apiService.sendClarificationResponse(
        sessionId,
        originalQuery,
        selectedOption
      );
      handleApiResponse(result, `ƒê√£ ch·ªçn: ${selectedOption.title}`);
    } catch (error) {
      console.error("Question selection error:", error);
      addAssistantMessage("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n.", true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendQuery(inputValue);
  };

  const handleOptionClick = (option: ClarificationOption) => {
    if (!currentClarification) return;

    const { originalQuery } = currentClarification;

    // Add user selection message with unique ID
    const userMessage: Message = {
      id: generateUniqueId(),
      type: "user",
      content: `ƒê√£ ch·ªçn: ${option.title}`,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);

    if (option.action === "proceed_with_collection") {
      handleCollectionSelection(option, originalQuery);
    } else if (option.action === "proceed_with_question") {
      handleQuestionSelection(option, originalQuery);
    } else if (option.action === "manual_input") {
      setCurrentClarification(null);
      addAssistantMessage("Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ª• th·ªÉ c·ªßa b·∫°n:");
    }
  };

  const renderClarificationOptions = (clarification: ClarificationData) => {
    if (!clarification?.options || clarification.options.length === 0) {
      return null;
    }

    return (
      <div className="clarification-options">
        {clarification.options.map((option) => (
          <div
            key={option.id}
            className={`option-card ${
              option.action === "proceed_with_collection"
                ? "collection-option"
                : "question-option"
            }`}
            onClick={() => handleOptionClick(option)}
          >
            <div className="option-header">
              <h4>{option.title}</h4>
              {option.confidence && (
                <span className="confidence-badge">{option.confidence}</span>
              )}
            </div>
            {option.description && (
              <p className="option-description">{option.description}</p>
            )}
            {option.examples && option.examples.length > 0 && (
              <div className="option-examples">
                V√≠ d·ª•: {option.examples.join(", ")}
              </div>
            )}
          </div>
        ))}
      </div>
    );
  };

  const formatFileName = (filePath: string): string => {
    const fileName =
      filePath.split("\\").pop()?.replace(".json", "") || filePath;
    return fileName;
  };

  const renderMessage = (message: Message) => {
    return (
      <div key={message.id} className={`message ${message.type}`}>
        <div className="message-avatar">
          {message.type === "user" ? (
            <UserIcon />
          ) : message.type === "assistant" ? (
            <BotIcon />
          ) : (
            <span className="system-icon">i</span>
          )}
        </div>

        <div className="message-content">
          <div className="message-text">{message.content}</div>

          {message.clarification && (
            <div className="clarification-container">
              {renderClarificationOptions(message.clarification)}
            </div>
          )}

          {/* Source Documents */}
          {message.sourceDocuments && message.sourceDocuments.length > 0 && (
            <div className="source-documents">
              <div className="source-documents-header">
                üìÑ Ngu·ªìn t√†i li·ªáu tham kh·∫£o:
              </div>
              <div className="source-documents-list">
                {message.sourceDocuments.map((doc, index) => (
                  <div key={index} className="source-document">
                    {formatFileName(doc)}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="message-meta">
            <span className="message-time">
              {message.timestamp.toLocaleTimeString("vi-VN", {
                hour: "2-digit",
                minute: "2-digit",
              })}
            </span>
            {message.processingTime && message.processingTime > 0 && (
              <span className="processing-time">
                {message.processingTime.toFixed(2)}s
              </span>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="chat-page">
      {/* Main Card Container wrapping everything */}
      <div className="main-card">
        <div className="chat-header">
          <div className="header-content">
            <div className="header-title">
              <h1>Tr·ª£ l√Ω Ph√°p lu·∫≠t AI</h1>
            </div>
            <div className="header-subtitle">
              H·ªá th·ªëng h·ªó tr·ª£ th√¥ng tin th·ªß t·ª•c h√†nh ch√≠nh
            </div>
          </div>
        </div>

        <div className="chat-container">
          <div className="messages-container">
            {messages.map(renderMessage)}

            {isLoading && (
              <div className="message assistant">
                <div className="message-avatar">
                  <BotIcon />
                </div>
                <div className="message-content">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            )}

            <div ref={messagesEndRef} />
          </div>

          <form onSubmit={handleSubmit} className="input-container">
            <div className="input-wrapper">
              <input
                ref={inputRef}
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n ho·∫∑c nh·∫•n mic ƒë·ªÉ n√≥i..."
                disabled={isLoading || isListening}
                className="message-input"
              />

              {/* Voice Input Button */}
              {recognition && (
                <button
                  type="button"
                  onClick={isListening ? stopListening : startListening}
                  disabled={isLoading}
                  className={`voice-button ${isListening ? "listening" : ""}`}
                  title={isListening ? "Nh·∫•n ƒë·ªÉ d·ª´ng ghi √¢m" : "Nh·∫•n ƒë·ªÉ n√≥i"}
                >
                  {isListening ? <MicOffIcon /> : <MicIcon />}
                </button>
              )}

              <button
                type="submit"
                disabled={isLoading || inputValue.trim() === "" || isListening}
                className="send-button"
              >
                <SendIcon />
              </button>
            </div>

            <div className="input-help">
              üí°{" "}
              <span>
                V√≠ d·ª•: "th·ªß t·ª•c khai sinh c·∫ßn g√¨", "l√†m ch·ª©ng th·ª±c b·∫£n sao"
                {recognition && " | Nh·∫•n mic ƒë·ªÉ nh·∫≠p b·∫±ng gi·ªçng n√≥i"}
              </span>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ChatPage;
