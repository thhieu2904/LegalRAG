import React, { useState, useRef, useEffect } from "react";
import "../styles/ChatPage.css";

// Simple icon components to replace lucide-react
const SendIcon = () => <span className="icon">‚û§</span>;
const BotIcon = () => <span className="icon">ü§ñ</span>;
const UserIcon = () => <span className="icon">üë§</span>;
const ClockIcon = () => <span className="icon">‚è∞</span>;
const AlertIcon = () => <span className="icon">‚ö†Ô∏è</span>;
const HelpIcon = () => <span className="icon">üí°</span>;

interface Message {
  id: string;
  type: "user" | "assistant" | "system";
  content: string;
  timestamp: Date;
  clarification?: ClarificationData;
  processing?: boolean;
  processingTime?: number;
  sourceDocuments?: string[];
}

interface ClarificationOption {
  id: string;
  title: string;
  description: string;
  confidence?: string;
  examples?: string[];
  action: string;
  collection?: string;
  question_text?: string;
  category?: string;
}

interface ClarificationData {
  message: string;
  options: ClarificationOption[];
  style: string;
  stage?: number;
  collection?: string;
  original_query?: string;
}

interface ApiResponse {
  type: string;
  answer?: string;
  clarification?: ClarificationData;
  session_id: string;
  processing_time: number;
  source_documents?: string[];
  error?: string;
}

const ChatPage: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      type: "system",
      content:
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ph√°p lu·∫≠t AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c th·ªß t·ª•c h√†nh ch√≠nh nh∆∞ h·ªô t·ªãch, ch·ª©ng th·ª±c, v√† nu√¥i con nu√¥i. B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?",
      timestamp: new Date(),
    },
  ]);

  const [inputValue, setInputValue] = useState("");
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [currentClarification, setCurrentClarification] = useState<{
    clarification: ClarificationData;
    originalQuery: string;
  } | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // üîß CORE FIX: Proper API integration with multi-turn clarification
  const sendQuery = async (query: string, isInitial: boolean = true) => {
    if (query.trim() === "" && isInitial) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: query,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setIsLoading(true);

    try {
      const payload = {
        query: query.trim(),
        session_id: sessionId,
      };

      const response = await fetch("/api/v2/optimized-query", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const result: ApiResponse = await response.json();

      if (!sessionId && result.session_id) {
        setSessionId(result.session_id);
      }

      handleApiResponse(result, query);
    } catch (error) {
      console.error("Error:", error);
      addAssistantMessage(
        "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
        true
      );
    } finally {
      setIsLoading(false);
      if (isInitial) {
        setInputValue("");
      }
    }
  };

  // üéØ GIAI ƒêO·∫†N 2‚Üí3: Handle collection selection ‚Üí Get question suggestions
  const handleCollectionSelection = async (
    selectedOption: ClarificationOption,
    originalQuery: string
  ) => {
    if (!sessionId || !currentClarification) return;

    setIsLoading(true);

    try {
      // ‚úÖ CORRECT FORMAT: Send to clarification endpoint
      const payload = {
        session_id: sessionId,
        original_query: originalQuery,
        selected_option: selectedOption,
      };

      const response = await fetch("/api/v2/clarify", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const result: ApiResponse = await response.json();
      handleApiResponse(result, `ƒê√£ ch·ªçn: ${selectedOption.title}`);
    } catch (error) {
      console.error("Collection selection error:", error);
      addAssistantMessage("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω l·ª±a ch·ªçn c·ªßa b·∫°n.", true);
    } finally {
      setIsLoading(false);
    }
  };

  // üéØ GIAI ƒêO·∫†N 3‚Üí4: Handle question selection ‚Üí Get final answer
  const handleQuestionSelection = async (
    selectedOption: ClarificationOption,
    originalQuery: string
  ) => {
    if (!sessionId) return;

    setIsLoading(true);

    try {
      // ‚úÖ CORRECT FORMAT: Send to clarification endpoint with question_text
      const payload = {
        session_id: sessionId,
        original_query: originalQuery,
        selected_option: selectedOption,
      };

      const response = await fetch("/api/v2/clarify", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const result: ApiResponse = await response.json();
      handleApiResponse(result, `ƒê√£ ch·ªçn: ${selectedOption.title}`);
    } catch (error) {
      console.error("Question selection error:", error);
      addAssistantMessage("C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n.", true);
    } finally {
      setIsLoading(false);
    }
  };

  const handleApiResponse = (result: ApiResponse, userQuery: string) => {
    if (result.type === "answer") {
      // Final answer received
      addAssistantMessage(
        result.answer || "",
        false,
        result.processing_time,
        result.source_documents
      );
      setCurrentClarification(null);
    } else if (result.type === "clarification_needed" && result.clarification) {
      // Clarification needed - could be collection selection or question suggestions
      setCurrentClarification({
        clarification: result.clarification,
        originalQuery: result.clarification.original_query || userQuery,
      });

      let clarificationMessage = result.clarification.message;
      if (result.clarification.style === "question_suggestion") {
        clarificationMessage +=
          "\n\nüí° Ch·ªçn m·ªôt c√¢u h·ªèi c·ª• th·ªÉ ƒë·ªÉ t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c nh·∫•t:";
      }

      addAssistantMessage(
        clarificationMessage,
        false,
        result.processing_time,
        result.source_documents,
        result.clarification
      );
    } else if (result.type === "no_results") {
      addAssistantMessage(
        "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi c√°ch kh√°c kh√¥ng?",
        false,
        result.processing_time,
        result.source_documents
      );
      setCurrentClarification(null);
    } else if (result.type === "error") {
      addAssistantMessage(`C√≥ l·ªói x·∫£y ra: ${result.error}`, true);
      setCurrentClarification(null);
    }
  };

  const addAssistantMessage = (
    content: string,
    isError: boolean = false,
    processingTime?: number,
    sourceDocuments?: string[],
    clarification?: ClarificationData
  ) => {
    const assistantMessage: Message = {
      id: Date.now().toString(),
      type: isError ? "system" : "assistant",
      content: content,
      timestamp: new Date(),
      clarification: clarification,
      processingTime: processingTime,
      sourceDocuments: sourceDocuments,
    };

    setMessages((prev) => [...prev, assistantMessage]);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    sendQuery(inputValue);
  };

  const handleOptionClick = (option: ClarificationOption) => {
    if (!currentClarification) return;

    const { originalQuery } = currentClarification;

    // Add user selection message
    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: `ƒê√£ ch·ªçn: ${option.title}`,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);

    if (option.action === "proceed_with_collection") {
      // GIAI ƒêO·∫†N 2‚Üí3: Collection selected, get question suggestions
      handleCollectionSelection(option, originalQuery);
    } else if (option.action === "proceed_with_question") {
      // GIAI ƒêO·∫†N 3‚Üí4: Question selected, get final answer
      handleQuestionSelection(option, originalQuery);
    } else if (option.action === "manual_input") {
      // Manual input requested
      setCurrentClarification(null);
      addAssistantMessage("Vui l√≤ng nh·∫≠p c√¢u h·ªèi c·ª• th·ªÉ c·ªßa b·∫°n:");
    }
  };

  const renderClarificationOptions = (clarification: ClarificationData) => {
    return (
      <div className="clarification-options">
        {clarification.options.map((option) => (
          <div
            key={option.id}
            className={`option-card ${
              clarification.style === "question_suggestion"
                ? "question-option"
                : "collection-option"
            }`}
            onClick={() => handleOptionClick(option)}
          >
            <div className="option-header">
              <h4>{option.title}</h4>
              {option.confidence && (
                <span className="confidence-badge">
                  ƒê·ªô tin c·∫≠y: {option.confidence}
                </span>
              )}
            </div>

            <p className="option-description">{option.description}</p>

            {option.examples && option.examples.length > 0 && (
              <div className="option-examples">
                <small>V√≠ d·ª•: {option.examples.join(", ")}</small>
              </div>
            )}
          </div>
        ))}
      </div>
    );
  };

  const renderMessage = (message: Message) => {
    return (
      <div key={message.id} className={`message ${message.type}`}>
        <div className="message-avatar">
          {message.type === "user" ? (
            <UserIcon />
          ) : message.type === "assistant" ? (
            <BotIcon />
          ) : (
            <AlertIcon />
          )}
        </div>

        <div className="message-content">
          <div className="message-text">{message.content}</div>

          {message.clarification && (
            <div className="clarification-container">
              {renderClarificationOptions(message.clarification)}
            </div>
          )}

          {/* Source Documents */}
          {message.sourceDocuments && message.sourceDocuments.length > 0 && (
            <div className="source-documents">
              <div className="source-documents-header">
                üìÅ Ngu·ªìn t√†i li·ªáu tham kh·∫£o:
              </div>
              <div className="source-documents-list">
                {message.sourceDocuments.map((doc, index) => (
                  <div key={index} className="source-document">
                    {doc.split("\\").pop()?.replace(".json", "") || doc}
                  </div>
                ))}
              </div>
            </div>
          )}

          <div className="message-meta">
            <span className="message-time">
              <ClockIcon />
              {message.timestamp.toLocaleTimeString()}
            </span>
            {message.processingTime && message.processingTime > 0 && (
              <span className="processing-time">
                ‚ö° {message.processingTime.toFixed(2)}s
              </span>
            )}
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="chat-page">
      <div className="chat-header">
        <div className="header-content">
          <div className="header-title">
            <BotIcon />
            <h1>Tr·ª£ l√Ω Ph√°p lu·∫≠t AI</h1>
          </div>
          <div className="header-subtitle">
            H·ªá th·ªëng h·ªó tr·ª£ th√¥ng tin th·ªß t·ª•c h√†nh ch√≠nh
          </div>
        </div>
      </div>

      <div className="chat-container">
        <div className="messages-container">
          {messages.map(renderMessage)}

          {isLoading && (
            <div className="message assistant">
              <div className="message-avatar">
                <BotIcon />
              </div>
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        <form onSubmit={handleSubmit} className="input-container">
          <div className="input-wrapper">
            <input
              ref={inputRef}
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
              disabled={isLoading}
              className="message-input"
            />
            <button
              type="submit"
              disabled={isLoading || inputValue.trim() === ""}
              className="send-button"
            >
              <SendIcon />
            </button>
          </div>

          <div className="input-help">
            <HelpIcon />
            <span>
              V√≠ d·ª•: "th·ªß t·ª•c khai sinh c·∫ßn g√¨", "l√†m ch·ª©ng th·ª±c b·∫£n sao"
            </span>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ChatPage;
